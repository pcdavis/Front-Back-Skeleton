

TESTING------------------------------------------------------------------
Steps for determing what to test:
1. Look at the code for each feature
2. Try to explain to a friend what it is supposed to do
3. Write a test that confirms it does it

Jest looks for files that end in .test.js or folders titled __tests__
Jest uses a global function called 'it' to run tests. It takes 2 arguments: a descrption string and a function that runs the test.
The function basically re-creates the React component we want to test and then uses expectations to see if certain things are present. A single it function can have multiple expectations
TIP:  throw in a console log to inspect the value of things you want to use for expectations

Example:
it('shows a comment box', () => {
    const div = document.createElement('div');  // create a div
    ReactDOM.render(<App />, div)               // render the App component into the div ---- these first two lines re-create what our React app does and allows us to then have expectations
    console.log(div.innerHTML)                  // This will show you what div contains to help you with writing expect statements
    expect(div.innerHTML).toContain('Hello')   //Now we can expect something and see if it has it. 
    ReactDOM.unMountComponentAtNode(div)
})

IMPORTANT: If you use enzyme, you can skip creating the div and then rendering the component in the div like above.

//-------Enzyme-------------------------------
Enzyme is a package by airbandb to make it easier to write jest expectations. See all the methods at airbnb.com/enzyme
IMPORTANT: it requires a little setup. See below.
Enzyme SETUP-------------------------------
npm install --save enzyme enzyme-adapter-react-16  // IMPORTANT: the last number is whatever version of react you are using. Check your package.json file. 
IMPORTANT: Create a new file in your src directory: src/setupTests.js // place the following code in that file: 
import Enzyme from 'enzyme';
import Adapter from 'enzyme-adapter-react-16';

Enzyme.configure({adapter: new Adapter() });

End of setup--------------------------------

Enzyme's three main methods: static, shallow, and full DOM.
Static - render the given component and return plain html - but no interaction like click events
Shallow - render just the given component and it's html children, but no React component children 
Full DOM - render the component and all of its children + lut us modify it afterwards - Allows you to simulate interactions like click events

Conceptual Mental Model----------
1. import react, enzyme, { enzymeMethodYouNeed }, the compnent you are testing and any subcomponents that you want to test if present
2. Basic structure goes like this: beforeEach -> it -> expect -> afterEach(unmount)

Enzyme syntax example----------------

import React from 'react';
import Enzyme from 'enzyme';
import { shallow } from 'enzyme';
import Comments_Page from 'pages/Comments_Page'
import CommentBox from 'components/CommentBox';
import CommentList from 'components/CommentList';

let myWrappedComponent; 

beforeEach(() => {
    myWrappedComponent = shallow(<Comments_Page />);
})

it('should show CommentBox', () => {
   expect(myWrappedComponent.find(CommentBox).length).toEqual(1)
})

it('should show CommentList', () => {
    expect(myWrappedComponent.find(CommentList).length).toEqual(1)
})

//What's happening is that the shallow method wraps the component you want to inspect. Then you can find any component that should be inside of the wrapped component. Find returns an array, so .length says how many copies of the found component are returned. The beforeEach method let's you create the myWrappedComponent each time a new it method is executed. Have to declare the myWrappedComponent variable outside so all tests have access to it.

Simulating events---------------
IMPORTANT: setState is ASYNCHRONOUS!  If you simulate anything that invokes setState, follow it with enzyme method, 'update' to immediately get state to update.
Example:
it('checks if new comment was input into text box', () => {
    wrapped.find('textarea').simulate('change', {
        target: { value: 'hello paul'}
    })
    wrapped.update();
    expect(wrapped.find('textarea').prop(value)).toEqual('hello paul');
})

//End of Enzyme ----------------------------

Jest for unit testing 
Cypress for site testing
Update package.json files with some extra scripts: //Note: when you run the script you type npm run cypress:open or whatever you want to call your script
"scripts": {
    "test": "jest --watchAll",
    "cypress:open": "cypress open"
},
To start Cypress type:  node_modules/.bin/cypress open  // this will add a cypress folder to your root directory. After it's installed start up your server and front end // see note about starting server below
IMPORTANT Instead of running nodemon during testing - use node server/index.js //nodemon will cause cypress to fail sometimes because it always restarts on changes 

Create a testing mode in the server index and .env file:
In .env use DEV_MODE = false/true
IMPORTANT - TURN IT TO FALSE AFTER TESTING!!!!!!!!!!!!!!!!!!
In the server index file add this to get past auth0 for testing:
app.use((req, res, next)=>{
    if(process.env.DEV_MODE){
            req.user ={
            id: 2,
            name:'Paul'
        }
    }
    next()
})

//-----End of testing------------------------------------------------------------------------------------------------------------------------
